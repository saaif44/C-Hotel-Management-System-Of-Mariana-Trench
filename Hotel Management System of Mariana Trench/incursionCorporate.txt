using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleAppPractice
{
    internal class Program
    {
        static void Main(string[] args)
        {
            IncursionCorporate.AddPerson(new Student("saif", "A+", new DateTime(2011, 11, 18), 3.11));
            IncursionCorporate.AddPerson(new Employee("shuvo", "O+", new DateTime(2001, 12, 29), 10000));
            IncursionCorporate.AddPerson(new Student("niha", "AB+", new DateTime(2012, 01, 29), 3.11));
            IncursionCorporate.AddPerson(new Employee("sadia", "O-", new DateTime(2007, 04, 18), 50000));



        }
    }
	
	internal abstract class Person
    {   
        private static int SerialNo = 0;
        private string id;
        private DateTime dateOfBirth;

        
        internal virtual string Id
        {
            get { return this.id; }
            set { this.id = "P-" + value; }
        }

        internal string Name { get; private set; }

        internal string BloodGroup { get; set; }

        internal DateTime DateOfBirth
        {
            get { return this.dateOfBirth; }
            set { this.dateOfBirth = value; }
        }
        
        internal Person() { }
        internal Person(string name, string bloodGroup, DateTime dateOfBirth)
        {
            this.Id = (++SerialNo).ToString();
            this.Name = name;
            this.BloodGroup = bloodGroup;
            this.DateOfBirth = dateOfBirth;
        }
        internal virtual void ShowInfo()
        {
            Console.WriteLine("ID: {0}", this.Id);
            Console.WriteLine("Name: {0}", this.Name);
            Console.WriteLine("Blood Group: {0}", this.BloodGroup);
            Console.WriteLine("Date of Birth: {0}", this.DateOfBirth);
        }
    }
	
	internal class Student  : Person
    {
        private double cgpa;
        internal double Cgpa
        {
            get { return this.cgpa; }
            set
            {
                if(value >= 0 && value <= 4.0)
                    this.cgpa = value;
                else
                    this.cgpa = -1;
            }
        }
        internal override string Id {  set => base.Id = value+"-S"; }
        internal Student(string name, string bloodGroup, DateTime dateOfBirth, double cgpa ) : base(name, bloodGroup, dateOfBirth)
        {
            this.Cgpa = cgpa;
        }
        internal override void ShowInfo()
        {
            base.ShowInfo();
            Console.WriteLine("cgpa: {0}\n", this.Cgpa);
        }
    }
	
	internal class Employee : Person
    {
        private double salary;
        
        internal double Salary
        {
            get { return this.salary; }
            set { this.salary = value; }
        }
        
        internal override string Id
        {
            set { base.Id = value + "-E"; }
        }
        internal Employee(string name, string bloodGroup, DateTime dateOfBirth, double salary) : base(name, bloodGroup, dateOfBirth)
        {
            this.Salary = salary;
        }
        internal override void ShowInfo()
        {
            base.ShowInfo();
            Console.WriteLine("Salary {0}\n", this.Salary);
        }
    }
	
	internal class IncursionCorporate
    {
        private static Person[] personList = new Person[500];
        private static int count = 0;

        internal static void AddPerson(Person p)
        {
            personList[count] = p;
            count++;
        }
        internal static void ShowAll()
        {
            int index = 0;
            while (index < count)
            {
                if(personList[index] != null)
                    personList[index].ShowInfo();
                index++;
            }
        }
        internal static bool Search(string key, out int info)
        {
            bool found = false;
            int index = 0;
            while ( index < count)
            {
                if (key == personList[index].Id)
                {
                    found = true;
                    info = index;
                    Console.WriteLine("data found");
                    personList[index].ShowInfo();
                    return found;

                }
                index++;
            }
            if (!found)
                Console.WriteLine("data not found");
            info = -1;
            return found;
        }

        internal static void DeletePerson(string key)
        {
            int indexNumber;
            bool decision = Search(key, out indexNumber);
            if (decision)
            {
                personList[indexNumber] = null;
                Console.WriteLine("delete complete\n\n");
                ShowAll();
            }
        }
    }
	
}